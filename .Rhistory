library(igraph)
library(BioTIP)
package.version('BioTIP') # [1] "1.5.0"
setwd("~/Desktop/BioTIP_application")
load("~/Desktop/BioTIP_application/input.Rdata/GSE52583/GSE52583_monocle_counts.RData")
dim(dat)
load("~/Desktop/BioTIP_application/input.Rdata/GSE52583/GSE52583_cli.RData")
dim(cli)
# check if sample IDs in the 'cli' matris are identical to the sample names in the 'dat' matrix
all(rownames(cli) == colnames(dat))  # TRUE
###### 1)  focus on T1 branch #############
y <-  which((cli$age=="18.5" & (cli$CellType !="AT1"   | cli$cell_type != "18.5_AT1") )
| cli$age=="Adult" )
length(y)   # 86
dat <- dat[,-y]; dim(dat)  # [1] 10359    110
cli <- cli[-y,]; dim(cli)  # 110  21
table(cli$CellType, cli$age)
#            14.5 16.5 18.5 Adult
# Ambiguous    2    0    0     0
# AT1         10    3    38    0
# AT2          8   11    0    0
# Unknown     25   13    0     0
tmp <- as.vector(cli$age)
x <- which(tmp=="18.5")
tmp[x] <- paste(cli$age[x], cli$CellType[x], sep="_")
table(tmp)
#  14.5     16.5 18.5_AT1
#  45       27       38
tmp <- factor(tmp, levels=c('14.5','16.5','18.5_AT1'))
cli$BioTIP_state = tmp
dim(dat) # [1] 10359   110
samplesL <- split(rownames(cli),f = cli$BioTIP_state)
(tmp <- lapply(samplesL, length))
if(any(tmp<4))  samplesL <- samplesL[-which(tmp<4)]
####### 2) find gene modules ######################
# Pre-selection Transcript
cut.preselect = 0.05
cut.fdr = 0.1
cut.minsize = 30
## The current function works on matrix but not "dgCMatrix"
if(class(dat)=="dgCMatrix") dat <- as.matrix(dat)
class(dat)
class(dat)[1]
## The current function works on matrix but not "dgCMatrix"
if(class(dat)[1]=="dgCMatrix") dat <- as.matrix(dat)
test <- sd_selection(dat, samplesL, cut.preselect)
names(test)
#[1] "14.5"     "16.5"     "18.5_AT1"
head(test[["16.5"]])
# if the output is a numeric, you might wrongly use dgCMatrix for the sd_selection()
class(test[[1]])
igraphL <- getNetwork(test, fdr = cut.fdr)
cluster <- getCluster_methods(igraphL)
names(cluster)
membersL_noweight <- getMCI(cluster,test, adjust.size = FALSE)
names(membersL_noweight)
#plotBar_MCI(membersL_noweight, ylim = c(0,300))
plotBar_MCI(membersL_noweight, ylim = c(0,50), minsize = cut.minsize)
dev.off
# Get the statistics using the MCI system, for the most top module per state
maxMCI.per.state <- getMaxMCImember(membersL_noweight[["members"]],membersL_noweight[["MCI"]],
min =cut.minsize, n=1)
names(maxMCI.per.state)
#[1] "idx"     "members"
head(maxMCI.per.state[['idx']])
# When set n=2 in this function, the output will have one more object "2topest.members",
# and two module IDs per state in the 'maxMCI.per.state$idx' object (when existing).
# In this case, you can extract the MCI score down to the 2nd highest bar in a state pf interest,
# by calling function
maxMCI.per.state_2 <- getMaxMCImember(membersL_noweight[["members"]],membersL_noweight[["MCI"]],
min =cut.minsize, n=2)
names(maxMCI.per.state)
# When set n=2 in this function, the output will have one more object "2topest.members",
# and two module IDs per state in the 'maxMCI.per.state$idx' object (when existing).
# In this case, you can extract the MCI score down to the 2nd highest bar in a state pf interest,
# by calling function
maxMCI.per.state_2 <- getMaxMCImember(membersL_noweight[["members"]],membersL_noweight[["MCI"]],
min =cut.minsize, n=1)
names(maxMCI.per.state)
# When set n=2 in this function, the output will have one more object "2topest.members",
# and two module IDs per state in the 'maxMCI.per.state$idx' object (when existing).
# In this case, you can extract the MCI score down to the 2nd highest bar in a state pf interest,
# by calling function
maxMCI.per.state_2 <- getMaxMCImember(membersL_noweight[["members"]],membersL_noweight[["MCI"]],
min =cut.minsize, n=2)
names(maxMCI.per.state)
names(maxMCI.per.state_2)
#[1] "idx"     "members"    "2topest.members"
##[1] "idx"     "members" Mar 4th
head(maxMCI.per.state_2[['idx']][['16.5']])
getNextMaxStats(membersL_noweight[['MCI']], idL = maxMCI.per.state_2[['idx']],
whoisnext='16.5', which.next = 2)
## Extract candidate module genes
head(maxMCI.per.state[['members']][['18.5_AT1']])
maxMCI = getMaxStats(membersL_noweight[['MCI']], maxMCI.per.state[['idx']])
head(maxMCI)
# Extract the CTS genes for the state with the highest MCI in the system,
# which is the predicted 'tipping point.'
CTS.AT1.E16 =  getCTS(maxMCI, membersL_noweight[["members"]])
## Extract n states of which the highest MCI per are the top score in the system.
## This function is important when analyzing a complex system with multiple tipping points.
getTopMCI(membersL_noweight[["members"]],  membersL_noweight[["MCI"]],
membersL_noweight[["MCI"]],
min = cut.minsize, n = 2)
# 16.5      18.5_AT1
# 28.77452   18.88909
## Here, we set n=1 to focus on the state '16.5', i.e., the state with the most top MCI.
MCI.AT1.E16 = getTopMCI(membersL_noweight[["members"]],  membersL_noweight[["MCI"]],
membersL_noweight[["MCI"]],
min = cut.minsize, n = 1)
# Alternatively, in this example, we can simply get the score by
max(maxMCI) # 28.77452
## In case you want to look into more modules,
CTS.AT1.E16.2nd <- maxMCI.per.state_2[['2topest.members']]['16.5']
length(CTS.AT1.E16.2nd)  #38   ##1, Mar 4th
CTS.AT1.E16.2nd  #38   ##1, Mar 4th
lengthS(CTS.AT1.E16.2nd)  #38   ##1, Mar 4th
lengths(CTS.AT1.E16.2nd)  #38   ##1, Mar 4th
getNextMaxStats(membersL_noweight[['MCI']], idL = maxMCI.per.state_2[['idx']],
whoisnext='16.5', which.next = 2)
## Estimate significance, NOT repeat (takes a while)
C = 1000
n <- length(CTS.AT1.E16)
simuMCI <- simulationMCI(n, samplesL, dat,  B=C)
# load("../../../result/GSE52583/T1_branch.CellType/GSE52583_GenePermutation_1000CTS_AT1.CellType0.05_fdr0.1_minsize30.RData")
#  simuMCI <- simuMCI[["E16_1st"]]
names(MCI.AT1.E16) <- "16.5"
plot_MCI_Simulation(MCI.AT1.E16, simuMCI, las=2,ylim=c(0,30),
main=paste("E16.5 CTS", n, "genes",
"\n","vs. ",C, "times of gene-permutation"), which2point="16.5")
##################################################
######  BioTIP score, shulffing genes ##############
C= 1000
CTS <- CTS.AT1.E16
n <- length(CTS)
BioTIP_score <- getIc(dat, samplesL, CTS, fun="BioTIP", shrink=TRUE, PCC_sample.target='average')
BioTIP_score
CTS
n
n <- lengths(CTS)
n
class(CTS)
BioTIP_score <- getIc(dat, samplesL, CTS, fun="BioTIP", shrink=TRUE, PCC_sample.target='average')
BioTIP_score
CTS <- CTS.AT1.E16
class(CTS)
debug(getIc)
BioTIP_score <- getIc(dat, samplesL, CTS, fun="BioTIP", shrink=TRUE, PCC_sample.target='average')
PCC_sample.target
class(PCC_sample.target)
head(subsetC)
head(subsetC)
class(subsetC)
head(counts)
table(row.names(counts) %in% genes)
genes
class(genes)
class(genes[[1]])
quit
class(CTS)
class(CTS[[1]])
BioTIP_score <- getIc(dat, samplesL, CTS, fun="BioTIP", shrink=TRUE, PCC_sample.target='average')
row.names(counts
q
row.names(counts)[1:3]
class(row.names(counts)[1])
head(genes)
class(genes)
q
?getIc
class(CTS)
length(CTS)
for (i in 1:length(CTS)) {
BioTIP_score <- getIc(dat, samplesL, CTS[[i]], fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
}
undebug(getIc)
BioTIP_score=[]
n <- length(CTS)
BioTIP_score=array(dim=n)
for (i in 1:n) {
BioTIP_score[i] <- getIc(dat, samplesL, CTS[[i]], fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
}
n <- length(CTS)
BioTIP_score=array(dim=n)
for (i in 1:n) {
BioTIP_score[i] <- getIc(dat, samplesL, CTS[[i]], fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
}
BioTIP_score
CTS[[i]]
class(CTS[[i]])
names(CTS[[i]])
n <- length(CTS)
BioTIP_score=array(dim=n)
for (i in 1:n) {
BioTIP_score[i] <- getIc(dat, samplesL, names(CTS[[i]]), fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
}
BioTIP_score
tmp <- getIc(dat, samplesL, names(CTS[[1]]), fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
tmp
class(tmp)
CTS.AT1.E16
names(CTS.AT1.E16)
# Extract the CTS genes for the state with the highest MCI in the system,
# which is the predicted 'tipping point.'
CTS.AT1.E16 =  getCTS(maxMCI, membersL_noweight[["members"]])[["16.5"]]
names(CTS.AT1.E16)
#Length: 517
#Length: 517
#Length: 516
class(CTS.AT1.E16)
n <- length(CTS)
n
CTS <- CTS.AT1.E16
n <- length(CTS)
n
BioTIP_score <- getIc(dat, samplesL, CTS, fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
BioTIP_score
CTS[1:10]
BioTIP_score <- getIc(dat, samplesL, names(CTS), fun="BioTIP", shrink=TRUE,
PCC_sample.target='average')
BioTIP_score
simuBioTIP_g  <- simulation_Ic(n, samplesL, dat, B=C,
fun="BioTIP", shrink=TRUE)
#  ns <- length(samplesL[[x]])  # of cells at the state of interest
simuBioTIP_s <- matrix(nrow=length(samplesL), ncol=C)
rownames(simuBioTIP_s) = names(samplesL)
for(j in 1:length(samplesL)) {
ns <- length(samplesL[[j]])  # of each state
simuBioTIP_s[j,] <- simulation_Ic_sample(dat, ns, Ic=BioTIP_score[x],
genes=CTS, B=C,
fun="BioTIP", shrink=TRUE)
}
## global matplot
plot_Ic_Simulation(BioTIP_score, simuBioTIP_g, las = 2, ylab="BioTIP",
main= paste("CTS.E16 (",n," transcripts)"),
fun="matplot", which2point= '16.5') #need finite 'ylim' values, Mar 4th
## #local Kernel Density Plot
d <- density(simuBioTIP_s['16.5',]) # returns the density data
?density
simuBioTIP_s
dim(simuBioTIP_s)
row.names(simuBioTIP_s)
for(j in 1:length(samplesL)) {
ns <- length(samplesL[[j]])  # of each state
simuBioTIP_s[j,] <- simulation_Ic_sample(dat, ns, Ic=BioTIP_score[x],
genes=CTS, B=C,
fun="BioTIP", shrink=TRUE)
}
length(samplesL[[1]])
length(samplesL)
length(samplesL[[2]])
dat[1:3]
dat[1:3,1:5]
BioTIP_score[2]
CTS[1:10]
for(j in 1:length(samplesL)) {
ns <- length(samplesL[[j]])  # of each state
simuBioTIP_s[j,] <- simulation_Ic_sample(dat, ns, Ic=BioTIP_score[x],
genes=names(CTS), B=C,
fun="BioTIP", shrink=TRUE)
}
class(CTS) #membership
class(CTS) #membership
C <-10
#names(CTS) gives exactly gene names of interest
for(j in 1:length(samplesL)) {
ns <- length(samplesL[[j]])  # of each state
simuBioTIP_s[j,] <- simulation_Ic_sample(dat, ns, Ic=BioTIP_score[x],
genes=names(CTS), B=C,
fun="BioTIP", shrink=TRUE)
}
## #local Kernel Density Plot
d <- density(simuBioTIP_s['16.5',]) # returns the density data
#Error in density.default(simuBioTIP_s["16.5", ]) :
#    'x' contains missing values
plot(d) # plots the results
abline(v=BioTIP_score['16.5'], col="green")
plot_Ic_Simulation(BioTIP_score, simuBioTIP_g, las = 2, ylab="BioTIP", ylim=c(0,0.12),
main=paste(length(CTS),names(samplesL)[x], "genes", "\n","vs. ",C, "gene-permutations"),
fun="boxplot", which2point= x)
length(CTS)
paste(length(CTS),names(samplesL)[x], "genes", "\n","vs. ",C, "gene-permutations")
names(samplesL)[x]
names(samplesL)
x
x <- 2
plot_Ic_Simulation(BioTIP_score, simuBioTIP_g, las = 2, ylab="BioTIP", ylim=c(0,0.12),
main=paste(length(CTS),names(samplesL)[x], "genes", "\n","vs. ",C, "gene-permutations"),
fun="boxplot", which2point= x)
plot_SS_Simulation(BioTIP_score, simuBioTIP_g,
main = paste("Delta BioTIP",n,"genes"),
ylab=NULL)
plot_Ic_Simulation(BioTIP_score, simuBioTIP_s, las = 2, ylab="BioTIP", ylim=c(0, 4),
main=paste(length(CTS), names(samplesL)[x],"genes", "\n","vs. ",C, "sample-permutations"),
fun="matplot", which2point= x)
plot_SS_Simulation(BioTIP_score, simuBioTIP_s,
main = "Delta BioTIP, label shuffling",
ylab=NULL)
wilcox.test(simuBioTIP_g[1,], simuBioTIP_g[2,]) # p-value < 2.2e-16
wilcox.test(simuBioTIP_g[3,], simuBioTIP_g[2,]) # p-value < 2.2e-16
n <- length(CTS)
Ic_score <- getIc(dat, samplesL, CTS, fun="cor", PCC_sample.target='average')
Ic_score
class(CTS)
Ic_score <- getIc(dat, samplesL, names(CTS), fun="cor", PCC_sample.target='average')
Ic_score
simuIc_g  <- simulation_Ic(n, samplesL, dat, B=C,
fun='cor')
#### The previous Ic score for the identified CTS,  shulffing labelling
x <- 2
#  ns <- length(samplesL[[x]])  # of fixed number of cells
simuIc_s <- matrix(nrow=length(samplesL), ncol=C)
rownames(simuIc_s) = names(samplesL)
for(j in 1:length(samplesL)) {
ns <- length(samplesL[[j]])  # for each state rewpectively
simuIc_s[j,] <- simulation_Ic_sample(dat, ns, Ic=Ic_score[x],
genes=names(CTS), B=C,
fun="cor")
}
plot_Ic_Simulation(Ic_score, simuIc_g, las = 2, ylab="Ic",
main=paste(length(CTS),names(samplesL)[x], "genes", "\n","vs. ",C, "gene-permutations"),
fun="boxplot", which2point= x)
x
plot_SS_Simulation(Ic_score, simuIc_g,
main = paste("Delta Ic",n,"genes"),
ylab=NULL)
plot_Ic_Simulation(Ic_score, simuIc_s, las = 2, ylab="Ic", ylim=c(1, 10),
main=paste(length(CTS), names(samplesL)[x],"genes", "\n","vs. ",C, "sample-permutations"),
fun="matplot", which2point= x)
plot_SS_Simulation(Ic_score, simuIc_s,
main = "Delta BioTIP, label shuffling",
ylab=NULL)
wilcox.test(simuIc_g[1,], simuIc_g[2,]) # p-value < 2.2e-16
wilcox.test(simuIc_g[3,], simuIc_g[2,]) # p-value < 2.2e-16
